import { Component } from "./base/Component";
import { ComponentProvider } from "./base/ComponentProvider";
import { ElementProvider } from "./base/ElementProvider";
import { Provider } from "./base/Provider";
import { ContainerProvider, TextProvider } from "./providers";
import { CompatElement } from "./types";
export declare function createProvider(el: CompatElement | string, key: string, index: number, containerProvider: Provider): ComponentProvider | ElementProvider | TextProvider;
export declare function renderProviders(containerProvider: Provider, providers: Provider[], children: Array<CompatElement | string>, updatedHooks: Function[], nextContexts: Record<string, Component>, nextState?: any, isForceUpdate?: boolean): boolean;
export declare function renderProvider(element: any, container: Element, provider?: Provider | null, contexts?: Record<string, Component>): Provider<Element | Node | Component>;
export declare function render(element: any, container: Element, callback?: Function): void;
export declare function renderSelf(element: any, self: Element, containerProvider?: ContainerProvider | null): ContainerProvider;
export declare function hydrate(element: any, container: Element, callback?: Function): void;
